name: CI/CD

on:
    push:
        branches:
            - master

jobs:
    tests:
        name: Coding standards and unit tests
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: Use Node.js 18.x
              uses: actions/setup-node@v1
              with:
                  node-version: 18.x
            - name: Install JS dependencies (npm install)
              run: npm ci
            - name: ESLint (JS)
              run: npx eslint
            - name: Pull images
              run: docker-compose pull
            - name: Use env.test
              run: cp .env.test .env
            - name: Start services
              run: docker-compose --env-file .env.test up --build -d
            - name: Wait for services
              run: |
                  APP_BOOT_TIMEOUT=`expr $(date +%s) + 600`
                  UNHEALTHY_ALLOWANCE_LEFT=20
                  while status="$(docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" "$(docker-compose ps -q node)")"; do
                    case $status in
                      starting)
                        if [ $APP_BOOT_TIMEOUT -lt $(date +%s) ]; then
                          echo "System boot timed out - 10 mins elapsed."
                          docker logs --since="10m" "$(docker-compose ps -q php)"
                          exit 1
                        fi
                        UNHEALTHY_ALLOWANCE_LEFT=20
                        sleep 1;;
                      healthy)
                        exit 0;;
                      unhealthy)
                        if [ $UNHEALTHY_ALLOWANCE_LEFT -eq 0 ]; then
                          docker logs --since="10m" "$(docker-compose ps -q php)"
                          exit 1
                        else
                          UNHEALTHY_ALLOWANCE_LEFT=$((UNHEALTHY_ALLOWANCE_LEFT - 1))
                          sleep 3
                        fi;;
                    esac
                  done
                  exit 1
            - name: Check HTTP reachability
              run: curl http://localhost
            - name: Run unit tests
              run: npm test
    docker-push:
        needs: tests
        name: Docker build & push
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
              name: Check out code
            - name: Install buildx
              id: buildx
              uses: crazy-max/ghaction-docker-buildx@v1
              with:
                version: latest
            - name: Login to docker hub
              run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            - name: Build the image
              run: |
                docker buildx build --push \
                --tag koalati/tools-service:latest \
                --platform linux/amd64,linux/arm/v7,linux/arm64/v8 .
    deploy:
        needs: docker-push
        name: Digital Ocean re-deployment
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
              name: Check out code
            - name: curl
              uses: wei/curl@v1
              with:
                args: |
                    -X POST -H \"Content-Type: application/json\" -H \"Authorization: Bearer ${{ secrets.DIGITALOCEAN_DEPLOY_TOKEN }}\" \"https://api.digitalocean.com/v2/apps/${{ secrets.DIGITALOCEAN_APP_ID }}/deployments\"
